
Running eval: aime with command ['python', '/home/ubuntu/wenjie-illinois/SkyThought/skythought/skythought_evals/inference_and_check.py', '--model', 'deepseek-ai/DeepSeek-R1-Distill-Qwen-32B', '--task', 'aime', '--tp', '8', '--start', '0', '--end', '1', '--prompt_style', 'thinking', '--continue_final_message', 'True', '--temperatures', '0.6', '--chat_template', 'chat_template.jinja', '--difficulty', '2025']
INFO 02-19 15:59:01 __init__.py:183] Automatically detected platform cuda.
Temperature: [0.6]
INFO 02-19 15:59:08 config.py:520] This model supports multiple tasks: {'classify', 'generate', 'reward', 'score', 'embed'}. Defaulting to 'generate'.
INFO 02-19 15:59:08 config.py:1328] Defaulting to use mp for distributed inference
WARNING 02-19 15:59:08 arg_utils.py:1107] Chunked prefill is enabled by default for models with max_model_len > 32K. Currently, chunked prefill might not work with some features or models. If you encounter any issues, please disable chunked prefill by setting --enable-chunked-prefill=False.
INFO 02-19 15:59:08 config.py:1483] Chunked prefill is enabled with max_num_batched_tokens=2048.
INFO 02-19 15:59:08 llm_engine.py:232] Initializing an LLM engine (v0.7.0) with config: model='deepseek-ai/DeepSeek-R1-Distill-Qwen-32B', speculative_config=None, tokenizer='deepseek-ai/DeepSeek-R1-Distill-Qwen-32B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=131072, download_dir=None, load_format=auto, tensor_parallel_size=8, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=deepseek-ai/DeepSeek-R1-Distill-Qwen-32B, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=True, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
WARNING 02-19 15:59:08 multiproc_worker_utils.py:298] Reducing Torch parallelism from 240 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 02-19 15:59:08 custom_cache_manager.py:17] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:08 multiproc_worker_utils.py:227] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:10 cuda.py:225] Using Flash Attention backend.
INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:15 utils.py:938] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:15 pynccl.py:67] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
INFO 02-19 15:59:18 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /home/ubuntu/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3,4,5,6,7.json
INFO 02-19 15:59:19 shm_broadcast.py:256] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3, 4, 5, 6, 7], buffer_handle=(7, 4194304, 6, 'psm_f22595fb'), local_subscribe_port=38197, remote_subscribe_port=None)
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:19 model_runner.py:1110] Starting to load model deepseek-ai/DeepSeek-R1-Distill-Qwen-32B...
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:19 weight_utils.py:251] Using model weights format ['*.safetensors']

Loading safetensors checkpoint shards:   0% Completed | 0/8 [00:00<?, ?it/s]

Loading safetensors checkpoint shards:  12% Completed | 1/8 [00:00<00:04,  1.50it/s]

Loading safetensors checkpoint shards:  25% Completed | 2/8 [00:01<00:04,  1.27it/s]

Loading safetensors checkpoint shards:  38% Completed | 3/8 [00:02<00:03,  1.25it/s]

Loading safetensors checkpoint shards:  50% Completed | 4/8 [00:03<00:03,  1.20it/s]

Loading safetensors checkpoint shards:  62% Completed | 5/8 [00:04<00:02,  1.15it/s]

Loading safetensors checkpoint shards:  75% Completed | 6/8 [00:05<00:01,  1.12it/s]
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:25 model_runner.py:1115] Loading model weights took 7.7085 GB
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:25 model_runner.py:1115] Loading model weights took 7.7085 GB
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:25 model_runner.py:1115] Loading model weights took 7.7085 GB
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:25 model_runner.py:1115] Loading model weights took 7.7085 GB
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:25 model_runner.py:1115] Loading model weights took 7.7085 GB

Loading safetensors checkpoint shards:  88% Completed | 7/8 [00:05<00:00,  1.32it/s]
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:25 model_runner.py:1115] Loading model weights took 7.7085 GB
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:26 model_runner.py:1115] Loading model weights took 7.7085 GB

Loading safetensors checkpoint shards: 100% Completed | 8/8 [00:06<00:00,  1.33it/s]

Loading safetensors checkpoint shards: 100% Completed | 8/8 [00:06<00:00,  1.26it/s]

INFO 02-19 15:59:26 model_runner.py:1115] Loading model weights took 7.7085 GB
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.50 seconds
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.10GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.27GiB.
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.51 seconds
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.10GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.27GiB.
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.50 seconds
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.10GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.27GiB.
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.48 seconds
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.10GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.27GiB.
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.53 seconds
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 1.82GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.55GiB.
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.65 seconds
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.10GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.27GiB.
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.69 seconds
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.10GiB; PyTorch activation peak memory takes 0.15GiB; the rest of the memory reserved for KV Cache is 61.27GiB.
INFO 02-19 15:59:31 worker.py:266] Memory profiling takes 4.70 seconds
INFO 02-19 15:59:31 worker.py:266] the current vLLM instance can use total_gpu_memory (79.14GiB) x gpu_memory_utilization (0.90) = 71.22GiB
INFO 02-19 15:59:31 worker.py:266] model weights take 7.71GiB; non_torch_memory takes 2.95GiB; PyTorch activation peak memory takes 1.41GiB; the rest of the memory reserved for KV Cache is 59.16GiB.
INFO 02-19 15:59:32 executor_base.py:108] # CUDA blocks: 121162, # CPU blocks: 8192
INFO 02-19 15:59:32 executor_base.py:113] Maximum concurrency for 131072 tokens per request: 14.79x
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-19 15:59:36 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   0%|          | 0/35 [00:00<?, ?it/s][1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 15:59:37 model_runner.py:1430] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.

Capturing CUDA graph shapes:   3%|▎         | 1/35 [00:00<00:31,  1.06it/s]
Capturing CUDA graph shapes:   6%|▌         | 2/35 [00:01<00:28,  1.16it/s]
Capturing CUDA graph shapes:   9%|▊         | 3/35 [00:02<00:26,  1.19it/s]
Capturing CUDA graph shapes:  11%|█▏        | 4/35 [00:03<00:26,  1.19it/s]
Capturing CUDA graph shapes:  14%|█▍        | 5/35 [00:04<00:25,  1.20it/s]
Capturing CUDA graph shapes:  17%|█▋        | 6/35 [00:05<00:24,  1.21it/s]
Capturing CUDA graph shapes:  20%|██        | 7/35 [00:05<00:23,  1.21it/s]
Capturing CUDA graph shapes:  23%|██▎       | 8/35 [00:06<00:22,  1.22it/s]
Capturing CUDA graph shapes:  26%|██▌       | 9/35 [00:07<00:21,  1.22it/s]
Capturing CUDA graph shapes:  29%|██▊       | 10/35 [00:08<00:20,  1.20it/s]
Capturing CUDA graph shapes:  31%|███▏      | 11/35 [00:09<00:19,  1.21it/s]
Capturing CUDA graph shapes:  34%|███▍      | 12/35 [00:09<00:18,  1.21it/s]
Capturing CUDA graph shapes:  37%|███▋      | 13/35 [00:10<00:18,  1.21it/s]
Capturing CUDA graph shapes:  40%|████      | 14/35 [00:11<00:17,  1.21it/s]
Capturing CUDA graph shapes:  43%|████▎     | 15/35 [00:12<00:16,  1.21it/s]
Capturing CUDA graph shapes:  46%|████▌     | 16/35 [00:13<00:15,  1.21it/s]
Capturing CUDA graph shapes:  49%|████▊     | 17/35 [00:14<00:14,  1.22it/s]
Capturing CUDA graph shapes:  51%|█████▏    | 18/35 [00:14<00:13,  1.22it/s]
Capturing CUDA graph shapes:  54%|█████▍    | 19/35 [00:15<00:13,  1.23it/s]
Capturing CUDA graph shapes:  57%|█████▋    | 20/35 [00:16<00:12,  1.23it/s]
Capturing CUDA graph shapes:  60%|██████    | 21/35 [00:17<00:11,  1.23it/s]
Capturing CUDA graph shapes:  63%|██████▎   | 22/35 [00:18<00:10,  1.22it/s]
Capturing CUDA graph shapes:  66%|██████▌   | 23/35 [00:19<00:09,  1.21it/s][1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 15:59:56 custom_all_reduce.py:224] Registering 4515 cuda graph addresses

Capturing CUDA graph shapes:  69%|██████▊   | 24/35 [00:19<00:09,  1.22it/s]
Capturing CUDA graph shapes:  71%|███████▏  | 25/35 [00:20<00:08,  1.23it/s]
Capturing CUDA graph shapes:  74%|███████▍  | 26/35 [00:21<00:07,  1.22it/s]
Capturing CUDA graph shapes:  77%|███████▋  | 27/35 [00:22<00:06,  1.23it/s]
Capturing CUDA graph shapes:  80%|████████  | 28/35 [00:23<00:05,  1.24it/s][1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 16:00:00 custom_all_reduce.py:224] Registering 4515 cuda graph addresses

Capturing CUDA graph shapes:  83%|████████▎ | 29/35 [00:23<00:04,  1.23it/s][1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 16:00:00 custom_all_reduce.py:224] Registering 4515 cuda graph addresses

Capturing CUDA graph shapes:  86%|████████▌ | 30/35 [00:24<00:04,  1.25it/s][1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 16:00:02 custom_all_reduce.py:224] Registering 4515 cuda graph addresses

Capturing CUDA graph shapes:  89%|████████▊ | 31/35 [00:25<00:03,  1.25it/s]
Capturing CUDA graph shapes:  91%|█████████▏| 32/35 [00:26<00:02,  1.26it/s][1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 16:00:03 custom_all_reduce.py:224] Registering 4515 cuda graph addresses

Capturing CUDA graph shapes:  94%|█████████▍| 33/35 [00:26<00:01,  1.27it/s][1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 16:00:04 custom_all_reduce.py:224] Registering 4515 cuda graph addresses

Capturing CUDA graph shapes:  97%|█████████▋| 34/35 [00:27<00:00,  1.27it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:28<00:00,  1.12it/s]
Capturing CUDA graph shapes: 100%|██████████| 35/35 [00:28<00:00,  1.21it/s]
INFO 02-19 16:00:05 custom_all_reduce.py:224] Registering 4515 cuda graph addresses
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 16:00:06 custom_all_reduce.py:224] Registering 4515 cuda graph addresses
[1;36m(VllmWorkerProcess pid=77042)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 30 secs, took 0.32 GiB
[1;36m(VllmWorkerProcess pid=77043)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 30 secs, took 0.32 GiB
[1;36m(VllmWorkerProcess pid=77040)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 30 secs, took 0.32 GiB
[1;36m(VllmWorkerProcess pid=77041)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 30 secs, took 0.32 GiB
[1;36m(VllmWorkerProcess pid=77044)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 29 secs, took 0.32 GiB
[1;36m(VllmWorkerProcess pid=77045)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 30 secs, took 0.32 GiB
INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 29 secs, took 0.33 GiB
[1;36m(VllmWorkerProcess pid=77046)[0;0m INFO 02-19 16:00:06 model_runner.py:1558] Graph capturing finished in 30 secs, took 0.32 GiB
INFO 02-19 16:00:06 llm_engine.py:429] init engine (profile, create kv cache, warmup model) took 39.41 seconds
Loaded 0 existing results.
INFO 02-19 16:00:09 chat_utils.py:330] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.

Processed prompts:   0%|          | 0/1 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:31<00:00, 31.78s/it, est. speed input: 1.23 toks/s, output: 88.05 toks/s]
Processed prompts: 100%|██████████| 1/1 [00:31<00:00, 31.78s/it, est. speed input: 1.23 toks/s, output: 88.05 toks/s]
[rank0]: Traceback (most recent call last):
[rank0]:   File "/home/ubuntu/wenjie-illinois/SkyThought/skythought/skythought_evals/inference_and_check.py", line 724, in <module>
[rank0]:     main()
[rank0]:   File "/home/ubuntu/wenjie-illinois/SkyThought/skythought/skythought_evals/inference_and_check.py", line 718, in main
[rank0]:     perform_inference_and_check(
[rank0]:   File "/home/ubuntu/wenjie-illinois/SkyThought/skythought/skythought_evals/inference_and_check.py", line 189, in perform_inference_and_check
[rank0]:     response_entry, token_usage_for_response = _parse_response_for_idx(
[rank0]: NameError: name '_parse_response_for_idx' is not defined
ERROR 02-19 16:00:44 multiproc_worker_utils.py:122] Worker VllmWorkerProcess pid 77042 died, exit code: -15
INFO 02-19 16:00:44 multiproc_worker_utils.py:126] Killing local vLLM worker processes
[rank0]:[W219 16:00:51.949139509 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
/home/ubuntu/miniconda3/envs/eval/lib/python3.10/multiprocessing/resource_tracker.py:224: UserWarning: resource_tracker: There appear to be 1 leaked shared_memory objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
Error occurred while running eval aime: Command '['python', '/home/ubuntu/wenjie-illinois/SkyThought/skythought/skythought_evals/inference_and_check.py', '--model', 'deepseek-ai/DeepSeek-R1-Distill-Qwen-32B', '--task', 'aime', '--tp', '8', '--start', '0', '--end', '1', '--prompt_style', 'thinking', '--continue_final_message', 'True', '--temperatures', '0.6', '--chat_template', 'chat_template.jinja', '--difficulty', '2025']' returned non-zero exit status 1.
